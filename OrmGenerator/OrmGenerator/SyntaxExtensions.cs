using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace OrmGenerator;

public static class SyntaxExtensions
{
    public static T AddAttribute<T>(this T syntax, string name, params string[] argumentExpressions)
        where T : MemberDeclarationSyntax
    {
        if (argumentExpressions.Length == 0)
        {
            return (T)syntax.AddAttributeLists(
                SyntaxFactory.AttributeList(SyntaxFactory.SeparatedList(new List<AttributeSyntax>
                {
                    SyntaxFactory.Attribute(SyntaxFactory.ParseName(name))
                })));
        }

        return (T)syntax.AddAttributeLists(
            SyntaxFactory.AttributeList(SyntaxFactory.SeparatedList(new List<AttributeSyntax>
            {
                SyntaxFactory.Attribute(SyntaxFactory.ParseName(name), SyntaxFactory.AttributeArgumentList(
                    SyntaxFactory.SeparatedList(new List<AttributeArgumentSyntax>(argumentExpressions.Select(x =>
                        SyntaxFactory.AttributeArgument(SyntaxFactory.ParseExpression(x)))))))
            })));
    }

    public static string ToFullCodeString(this ClassDeclarationSyntax classDeclarationSyntax, string @namespace,
        params string[] usings)
    {
        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated>");
        builder.AppendLine("//     This code was generated by a tool.");
        builder.AppendLine("// </auto-generated>");
        builder.AppendLine("");
        builder.AppendLine("#nullable disable");
        builder.AppendLine("");
        builder.AppendLine(classDeclarationSyntax.ToCompilationUnit(@namespace, usings).NormalizeWhitespace()
            .ToFullString());
        return builder.ToString();
    }

    public static CompilationUnitSyntax ToCompilationUnit(this ClassDeclarationSyntax classDeclarationSyntax,
        string @namespace, params string[] usings)
    {
        return SyntaxFactory.CompilationUnit().AddUsings(usings)
            .AddMembers(SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(@namespace))
                .AddMembers(classDeclarationSyntax));
    }

    public static CompilationUnitSyntax AddUsings(this CompilationUnitSyntax compilationUnitSyntax,
        params string[] usings)
    {
        return compilationUnitSyntax.AddUsings(usings
            .Select(x => SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(x))).ToArray());
    }
}